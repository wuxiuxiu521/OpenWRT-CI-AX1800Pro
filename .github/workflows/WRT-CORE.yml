#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_TARGET:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string
      CI_NAME:
        required: false
        type: string
      WRT_ARCH:
        required: false
        type: string
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}
  WRT_DIR: 'wrt'
  CI_NAME: ${{inputs.CI_NAME}}
  WRT_ARCH: ${{inputs.WRT_ARCH}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-22.04
    steps:
      - name: Free Disk Space(清理磁盘空间)
        uses: FirelightFlagboy/gh-runner-free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: true
          large-packages: true
          swap-storage: true
          tool-cache: true

      - name: Initialization Environment(初始化环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo apt-get install -yqq clang-15
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

      - name: Combine Disks(合并磁盘)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: Checkout Projects(结算项目)
        uses: actions/checkout@main

      - name: Initialization Values(初始化变量)
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export WRT_CI=$(basename $GITHUB_WORKSPACE)
          export WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 5-)-$WRT_BRANCH
          export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$WRT_TARGET.txt)
          
          [[ -z $WRT_ARCH ]] && {
            export WRT_ARCH=$(sed -n 's/.*_DEVICE_\(.*\)_DEVICE_.*/\1/p' $GITHUB_WORKSPACE/Config/$WRT_TARGET.txt | head -n 1)
            echo "WRT_ARCH=$WRT_ARCH" >> $GITHUB_ENV
          }
         
          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_CI=$WRT_CI" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

      - name: Clone Code(拉取源码)
        # working-directory: ./
        run: |
          pwd

          df -hT $GITHUB_WORKSPACE
        
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd wrt && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

      - name: Check Scripts(检查代码)
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;
          # find $OPENWRT_PATH -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches(检查缓存)
        id: check-cache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@main
        with:
          key: ${{ env.WRT_ARCH }}-${{env.WRT_TARGET}}-${{ env.CI_NAME }}
          restore-keys: |
            ${{ env.WRT_ARCH }}-${{env.WRT_TARGET}}
            ${{ env.WRT_ARCH }}
          path: |
            # ./wrt/.ccache
            # ./wrt/staging_dir/host*
            # ./wrt/staging_dir/tool*
            $OPENWRT_PATH/.ccache
            $OPENWRT_PATH/staging_dir/host*
            $OPENWRT_PATH/staging_dir/tool*

      - if: ${{ steps.check-cache.outputs.cache-hit != '' }}
        name: Hit Caches
        continue-on-error: true
        run: |
          # find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
          find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
          done

          # mkdir -p ./wrt/tmp && echo "1" > ./wrt/tmp/.build
          mkdir -p $OPENWRT_PATH/tmp && echo "1" > $OPENWRT_PATH/tmp/.build
          echo "toolchain skiped done!"
          gh cache delete ${{ env.WRT_ARCH }}-${{env.WRT_TARGET}}-${{ env.CI_NAME }}

      - name: Update Feeds(更新软件包)
        run: |
          # cd ./wrt/
          cd $OPENWRT_PATH

          echo "src-git small8 https://github.com/kenzok8/small-package" >>"feeds.conf.default"

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages(自定义软件包)
        run: |
          # cd ./wrt/package/
          cd $OPENWRT_PATH/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings(自定义设置)
        run: |
          . $GITHUB_WORKSPACE/Scripts/function.sh
          # cd ./wrt/
          cd $OPENWRT_PATH/
          
          generate_config && cat .config
          
          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig -j$(nproc)

      - name: Download Packages(下载软件包)
        if: env.WRT_TEST != 'true'
        run: |
          # cd ./wrt/
          cd $OPENWRT_PATH/

          make download -j$(($(nproc) * 6))

      - name: Compile Firmware(编译固件)
        if: env.WRT_TEST != 'true'
        run: |
          # cd ./wrt/
          cd $OPENWRT_PATH/

          make -j$(($(nproc) * 12)) || make -j1 V=s

      - name: Machine Information(机器信息)
        run: |
          # cd ./wrt/
          cd $OPENWRT_PATH/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware(打包固件)
        run: |
          # cd ./wrt/ && mkdir ./upload/
          cd $OPENWRT_PATH/ && mkdir ./upload/

          # cp -f ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_VER"_"$WRT_DATE".txt
          cp -f $OPENWRT_PATH/.config $OPENWRT_PATH/upload/Config_"$WRT_TARGET"_"$WRT_VER"_"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)

            # find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +
            find $OPENWRT_PATH/bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +

            TYPE=$(echo $WRT_ARCH | cut -d'_' -f1)
            # for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
            for FILE in $(find $OPENWRT_PATH/bin/targets/ -type f -iname "*$TYPE*.*") ; do
                if [[ "$FILE" == *"initramfs"* ]]; then
                  rm -f "$FILE"
                  echo "delete $FILE"
                else
                  EXT=$(basename $FILE | cut -d '.' -f 2-)
                  NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
                  NEW_FILE="$WRT_TARGET"_"$NAME"_"$WRT_DATE"."$EXT"
                  # mv -f $FILE ./upload/$NEW_FILE                
                  mv -f $FILE $OPENWRT_PATH/upload/$NEW_FILE                
                fi
            done

            # mkdir -p $OPENWRT_PATH/pk
            find $OPENWRT_PATH -name *.ipk
            # mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk $OPENWRT_PATH/pk
            # tar -zcf Packages.tar.gz $OPENWRT_PATH/pk
            # mv $OPENWRT_PATH/pk/Packages.tar.gz ./upload/
            
            # find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
            find $OPENWRT_PATH/bin/targets/ -type f -exec mv -f {} $OPENWRT_PATH/upload/ \;
          fi

          echo "WRT_KVER=${KVER:-none}" >> $GITHUB_ENV

      - name: Release Firmware(发布固件)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.CI_NAME}}-${{env.WRT_TARGET}}_${{env.WRT_DATE}}
          # files: ./wrt/upload/*.*
          files: ${{ env.OPENWRT_PATH }}/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！
            京东云亚瑟 AX1800 Pro DAED 使用方法详见恩山帖子: https://www.right.com.cn/forum/thread-8402269-1-1.html
            MTK和QCA全系带开源硬件加速，别问了！
            
            内核版本：${{env.WRT_KVER}}

            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}

            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            平台：${{env.WRT_TARGET}}
            设备：${{env.WRT_TYPE}}
            地址：${{env.WRT_IP}}
            密码：${{env.WRT_PW}}
